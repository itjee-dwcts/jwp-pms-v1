// ============================================================================
// constants/dashboard.ts - ÎåÄÏãúÎ≥¥Îìú Í¥ÄÎ†® ÏÉÅÏàò Ï†ïÏùò
// ============================================================================

// ============================================================================
// ÎåÄÏãúÎ≥¥Îìú ÏÉÅÌÉú
// ============================================================================
export const DASHBOARD_STATUS = {
  LOADING: 'loading',
  READY: 'ready',
  ERROR: 'error',
  OFFLINE: 'offline',
} as const;

export type DashboardStatus = typeof DASHBOARD_STATUS[keyof typeof DASHBOARD_STATUS];

// ============================================================================
// ÎÇ†Ïßú Î≤îÏúÑ ÌÉÄÏûÖ
// ============================================================================
export const DATE_RANGE_TYPE = {
  WEEK: 'week',
  MONTH: 'month',
  QUARTER: 'quarter',
  YEAR: 'year',
  CUSTOM: 'custom',
} as const;

export type DateRangeType = typeof DATE_RANGE_TYPE[keyof typeof DATE_RANGE_TYPE];

// ============================================================================
// ÎùºÎ≤® Îß§Ìïë
// ============================================================================

export const DASHBOARD_STATUS_LABELS: Record<DashboardStatus, string> = {
  [DASHBOARD_STATUS.LOADING]: 'Î°úÎî© Ï§ë',
  [DASHBOARD_STATUS.READY]: 'Ï§ÄÎπÑÎê®',
  [DASHBOARD_STATUS.ERROR]: 'Ïò§Î•ò',
  [DASHBOARD_STATUS.OFFLINE]: 'Ïò§ÌîÑÎùºÏù∏',
};

export const DATE_RANGE_TYPE_LABELS: Record<DateRangeType, string> = {
  [DATE_RANGE_TYPE.WEEK]: 'Ï£ºÍ∞Ñ',
  [DATE_RANGE_TYPE.MONTH]: 'ÏõîÍ∞Ñ',
  [DATE_RANGE_TYPE.QUARTER]: 'Î∂ÑÍ∏∞',
  [DATE_RANGE_TYPE.YEAR]: 'Ïó∞Í∞Ñ',
  [DATE_RANGE_TYPE.CUSTOM]: 'ÏÇ¨Ïö©Ïûê Ï†ïÏùò',
};

// ============================================================================
// ÏÉâÏÉÅ Îß§Ìïë
// ============================================================================

export const DASHBOARD_STATUS_COLORS: Record<DashboardStatus, string> = {
  [DASHBOARD_STATUS.LOADING]: 'blue',
  [DASHBOARD_STATUS.READY]: 'green',
  [DASHBOARD_STATUS.ERROR]: 'red',
  [DASHBOARD_STATUS.OFFLINE]: 'gray',
};

// ============================================================================
// ÏòµÏÖò Î∞∞Ïó¥
// ============================================================================

export const DASHBOARD_STATUS_OPTIONS = Object.entries(DASHBOARD_STATUS_LABELS).map(
  ([value, label]) => ({ value: value as DashboardStatus, label })
);

export const DATE_RANGE_TYPE_OPTIONS = Object.entries(DATE_RANGE_TYPE_LABELS).map(
  ([value, label]) => ({ value: value as DateRangeType, label })
);

// ============================================================================
// Ìó¨Ìçº Ìï®ÏàòÎì§
// ============================================================================

export const isValidDashboardStatus = (status: string): status is DashboardStatus => {
  return Object.values(DASHBOARD_STATUS).includes(status as DashboardStatus);
};

export const isValidDateRangeType = (type: string): type is DateRangeType => {
  return Object.values(DATE_RANGE_TYPE).includes(type as DateRangeType);
};

export const isDashboardReady = (status: DashboardStatus): boolean => {
  return status === DASHBOARD_STATUS.READY;
};

export const isDashboardLoading = (status: DashboardStatus): boolean => {
  return status === DASHBOARD_STATUS.LOADING;
};

export const isDashboardError = (status: DashboardStatus): boolean => {
  return status === DASHBOARD_STATUS.ERROR;
};

export const isDashboardOffline = (status: DashboardStatus): boolean => {
  return status === DASHBOARD_STATUS.OFFLINE;
};

export const getDashboardStatusIcon = (status: DashboardStatus): string => {
  const iconMap = {
    [DASHBOARD_STATUS.LOADING]: '‚è≥',
    [DASHBOARD_STATUS.READY]: '‚úÖ',
    [DASHBOARD_STATUS.ERROR]: '‚ùå',
    [DASHBOARD_STATUS.OFFLINE]: 'üì¥',
  };

  return iconMap[status];
};

export const getDateRangeTypeIcon = (type: DateRangeType): string => {
  const iconMap = {
    [DATE_RANGE_TYPE.WEEK]: 'üìÖ',
    [DATE_RANGE_TYPE.MONTH]: 'üìÜ',
    [DATE_RANGE_TYPE.QUARTER]: 'üóìÔ∏è',
    [DATE_RANGE_TYPE.YEAR]: 'üìä',
    [DATE_RANGE_TYPE.CUSTOM]: '‚öôÔ∏è',
  };

  return iconMap[type];
};

// ÎÇ†Ïßú Î≤îÏúÑ Í≥ÑÏÇ∞ Ìó¨Ìçº
export const getDateRange = (type: DateRangeType): { start: Date; end: Date } | null => {
  const now = new Date();
  const start = new Date();
  const end = new Date();

  switch (type) {
    case DATE_RANGE_TYPE.WEEK:
      start.setDate(now.getDate() - 7);
      return { start, end };

    case DATE_RANGE_TYPE.MONTH:
      start.setMonth(now.getMonth() - 1);
      return { start, end };

    case DATE_RANGE_TYPE.QUARTER:
      start.setMonth(now.getMonth() - 3);
      return { start, end };

    case DATE_RANGE_TYPE.YEAR:
      start.setFullYear(now.getFullYear() - 1);
      return { start, end };

    case DATE_RANGE_TYPE.CUSTOM:
      return null; // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏÑ§Ï†ï

    default:
      return null;
  }
};

// ÎÇ†Ïßú Î≤îÏúÑÎ≥Ñ Í∏∞Î≥∏ ÏÉàÎ°úÍ≥†Ïπ® Í∞ÑÍ≤© (Î∞ÄÎ¶¨Ï¥à)
export const getDefaultRefreshInterval = (type: DateRangeType): number => {
  const intervalMap = {
    [DATE_RANGE_TYPE.WEEK]: 5 * 60 * 1000,    // 5Î∂Ñ
    [DATE_RANGE_TYPE.MONTH]: 15 * 60 * 1000,  // 15Î∂Ñ
    [DATE_RANGE_TYPE.QUARTER]: 60 * 60 * 1000, // 1ÏãúÍ∞Ñ
    [DATE_RANGE_TYPE.YEAR]: 6 * 60 * 60 * 1000, // 6ÏãúÍ∞Ñ
    [DATE_RANGE_TYPE.CUSTOM]: 10 * 60 * 1000,   // 10Î∂Ñ
  };

  return intervalMap[type];
};
