// ============================================================================
// constants/auth.ts - Ïù∏Ï¶ù Í¥ÄÎ†® ÏÉÅÏàò Ï†ïÏùò
// ============================================================================

// ============================================================================
// Ïù∏Ï¶ù ÏÉÅÌÉú
// ============================================================================
export const AUTH_STATUS = {
  LOADING: 'loading',
  AUTHENTICATED: 'authenticated',
  UNAUTHENTICATED: 'unauthenticated',
  ERROR: 'error',
} as const;

export type AuthStatus = typeof AUTH_STATUS[keyof typeof AUTH_STATUS];

// ============================================================================
// Î°úÍ∑∏Ïù∏ Î∞©Î≤ï
// ============================================================================
export const LOGIN_METHOD = {
  EMAIL: 'email',
  GOOGLE: 'google',
  GITHUB: 'github',
  SSO: 'sso',
} as const;

export type LoginMethod = typeof LOGIN_METHOD[keyof typeof LOGIN_METHOD];

// ============================================================================
// ÏÑ∏ÏÖò ÏÉÅÌÉú
// ============================================================================
export const SESSION_STATUS = {
  ACTIVE: 'active',
  EXPIRED: 'expired',
  REVOKED: 'revoked',
  INVALID: 'invalid',
} as const;

export type SessionStatus = typeof SESSION_STATUS[keyof typeof SESSION_STATUS];

// ============================================================================
// 2FA ÏÉÅÌÉú
// ============================================================================
export const TWO_FA_STATUS = {
  DISABLED: 'disabled',
  ENABLED: 'enabled',
  PENDING: 'pending',
  REQUIRED: 'required',
} as const;

export type TwoFAStatus = typeof TWO_FA_STATUS[keyof typeof TWO_FA_STATUS];

// ============================================================================
// ÎπÑÎ∞ÄÎ≤àÌò∏ Í∞ïÎèÑ
// ============================================================================
export const PASSWORD_STRENGTH = {
  WEAK: 'weak',
  FAIR: 'fair',
  GOOD: 'good',
  STRONG: 'strong',
} as const;

export type PasswordStrength = typeof PASSWORD_STRENGTH[keyof typeof PASSWORD_STRENGTH];

// ============================================================================
// ÎùºÎ≤® Îß§Ìïë
// ============================================================================

export const AUTH_STATUS_LABELS: Record<AuthStatus, string> = {
  [AUTH_STATUS.LOADING]: 'Î°úÎî© Ï§ë',
  [AUTH_STATUS.AUTHENTICATED]: 'Ïù∏Ï¶ùÎê®',
  [AUTH_STATUS.UNAUTHENTICATED]: 'ÎØ∏Ïù∏Ï¶ù',
  [AUTH_STATUS.ERROR]: 'Ïò§Î•ò',
};

export const LOGIN_METHOD_LABELS: Record<LoginMethod, string> = {
  [LOGIN_METHOD.EMAIL]: 'Ïù¥Î©îÏùº',
  [LOGIN_METHOD.GOOGLE]: 'Google',
  [LOGIN_METHOD.GITHUB]: 'GitHub',
  [LOGIN_METHOD.SSO]: 'SSO',
};

export const SESSION_STATUS_LABELS: Record<SessionStatus, string> = {
  [SESSION_STATUS.ACTIVE]: 'ÌôúÏÑ±',
  [SESSION_STATUS.EXPIRED]: 'ÎßåÎ£åÎê®',
  [SESSION_STATUS.REVOKED]: 'Ï∑®ÏÜåÎê®',
  [SESSION_STATUS.INVALID]: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå',
};

export const TWO_FA_STATUS_LABELS: Record<TwoFAStatus, string> = {
  [TWO_FA_STATUS.DISABLED]: 'ÎπÑÌôúÏÑ±Ìôî',
  [TWO_FA_STATUS.ENABLED]: 'ÌôúÏÑ±Ìôî',
  [TWO_FA_STATUS.PENDING]: 'ÏÑ§Ï†ï Ï§ë',
  [TWO_FA_STATUS.REQUIRED]: 'ÌïÑÏàò',
};

export const PASSWORD_STRENGTH_LABELS: Record<PasswordStrength, string> = {
  [PASSWORD_STRENGTH.WEAK]: 'ÏïΩÌï®',
  [PASSWORD_STRENGTH.FAIR]: 'Î≥¥ÌÜµ',
  [PASSWORD_STRENGTH.GOOD]: 'Ï¢ãÏùå',
  [PASSWORD_STRENGTH.STRONG]: 'Í∞ïÌï®',
};

// ============================================================================
// ÏÉâÏÉÅ Îß§Ìïë
// ============================================================================

export const AUTH_STATUS_COLORS: Record<AuthStatus, string> = {
  [AUTH_STATUS.LOADING]: 'blue',
  [AUTH_STATUS.AUTHENTICATED]: 'green',
  [AUTH_STATUS.UNAUTHENTICATED]: 'gray',
  [AUTH_STATUS.ERROR]: 'red',
};

export const LOGIN_METHOD_COLORS: Record<LoginMethod, string> = {
  [LOGIN_METHOD.EMAIL]: 'blue',
  [LOGIN_METHOD.GOOGLE]: 'red',
  [LOGIN_METHOD.GITHUB]: 'gray',
  [LOGIN_METHOD.SSO]: 'purple',
};

export const SESSION_STATUS_COLORS: Record<SessionStatus, string> = {
  [SESSION_STATUS.ACTIVE]: 'green',
  [SESSION_STATUS.EXPIRED]: 'yellow',
  [SESSION_STATUS.REVOKED]: 'red',
  [SESSION_STATUS.INVALID]: 'gray',
};

export const TWO_FA_STATUS_COLORS: Record<TwoFAStatus, string> = {
  [TWO_FA_STATUS.DISABLED]: 'gray',
  [TWO_FA_STATUS.ENABLED]: 'green',
  [TWO_FA_STATUS.PENDING]: 'yellow',
  [TWO_FA_STATUS.REQUIRED]: 'red',
};

export const PASSWORD_STRENGTH_COLORS: Record<PasswordStrength, string> = {
  [PASSWORD_STRENGTH.WEAK]: 'red',
  [PASSWORD_STRENGTH.FAIR]: 'orange',
  [PASSWORD_STRENGTH.GOOD]: 'yellow',
  [PASSWORD_STRENGTH.STRONG]: 'green',
};

// ============================================================================
// ÏòµÏÖò Î∞∞Ïó¥
// ============================================================================

export const AUTH_STATUS_OPTIONS = Object.entries(AUTH_STATUS_LABELS).map(
  ([value, label]) => ({ value: value as AuthStatus, label })
);

export const LOGIN_METHOD_OPTIONS = Object.entries(LOGIN_METHOD_LABELS).map(
  ([value, label]) => ({ value: value as LoginMethod, label })
);

export const SESSION_STATUS_OPTIONS = Object.entries(SESSION_STATUS_LABELS).map(
  ([value, label]) => ({ value: value as SessionStatus, label })
);

export const TWO_FA_STATUS_OPTIONS = Object.entries(TWO_FA_STATUS_LABELS).map(
  ([value, label]) => ({ value: value as TwoFAStatus, label })
);

export const PASSWORD_STRENGTH_OPTIONS = Object.entries(PASSWORD_STRENGTH_LABELS).map(
  ([value, label]) => ({ value: value as PasswordStrength, label })
);

// ============================================================================
// Ìó¨Ìçº Ìï®ÏàòÎì§
// ============================================================================

export const isValidAuthStatus = (status: string): status is AuthStatus => {
  return Object.values(AUTH_STATUS).includes(status as AuthStatus);
};

export const isValidLoginMethod = (method: string): method is LoginMethod => {
  return Object.values(LOGIN_METHOD).includes(method as LoginMethod);
};

export const isValidSessionStatus = (status: string): status is SessionStatus => {
  return Object.values(SESSION_STATUS).includes(status as SessionStatus);
};

export const isValidTwoFAStatus = (status: string): status is TwoFAStatus => {
  return Object.values(TWO_FA_STATUS).includes(status as TwoFAStatus);
};

export const isValidPasswordStrength = (strength: string): strength is PasswordStrength => {
  return Object.values(PASSWORD_STRENGTH).includes(strength as PasswordStrength);
};

export const isAuthenticated = (status: AuthStatus): boolean => {
  return status === AUTH_STATUS.AUTHENTICATED;
};

export const isUnauthenticated = (status: AuthStatus): boolean => {
  return status === AUTH_STATUS.UNAUTHENTICATED;
};

export const isAuthLoading = (status: AuthStatus): boolean => {
  return status === AUTH_STATUS.LOADING;
};

export const isAuthError = (status: AuthStatus): boolean => {
  return status === AUTH_STATUS.ERROR;
};

export const isSessionActive = (status: SessionStatus): boolean => {
  return status === SESSION_STATUS.ACTIVE;
};

export const isSessionExpired = (status: SessionStatus): boolean => {
  return status === SESSION_STATUS.EXPIRED;
};

export const isSessionRevoked = (status: SessionStatus): boolean => {
  return status === SESSION_STATUS.REVOKED;
};

export const isSessionInvalid = (status: SessionStatus): boolean => {
  return status === SESSION_STATUS.INVALID;
};

export const isTwoFAEnabled = (status: TwoFAStatus): boolean => {
  return status === TWO_FA_STATUS.ENABLED;
};

export const isTwoFARequired = (status: TwoFAStatus): boolean => {
  return status === TWO_FA_STATUS.REQUIRED;
};

export const isTwoFAPending = (status: TwoFAStatus): boolean => {
  return status === TWO_FA_STATUS.PENDING;
};

export const getAuthStatusIcon = (status: AuthStatus): string => {
  const iconMap = {
    [AUTH_STATUS.LOADING]: '‚è≥',
    [AUTH_STATUS.AUTHENTICATED]: '‚úÖ',
    [AUTH_STATUS.UNAUTHENTICATED]: '‚ùå',
    [AUTH_STATUS.ERROR]: '‚ö†Ô∏è',
  };

  return iconMap[status];
};

export const getLoginMethodIcon = (method: LoginMethod): string => {
  const iconMap = {
    [LOGIN_METHOD.EMAIL]: 'üìß',
    [LOGIN_METHOD.GOOGLE]: 'üîç',
    [LOGIN_METHOD.GITHUB]: 'üêô',
    [LOGIN_METHOD.SSO]: 'üîê',
  };

  return iconMap[method];
};

export const getSessionStatusIcon = (status: SessionStatus): string => {
  const iconMap = {
    [SESSION_STATUS.ACTIVE]: 'üü¢',
    [SESSION_STATUS.EXPIRED]: 'üü°',
    [SESSION_STATUS.REVOKED]: 'üî¥',
    [SESSION_STATUS.INVALID]: '‚ö´',
  };

  return iconMap[status];
};

export const getTwoFAStatusIcon = (status: TwoFAStatus): string => {
  const iconMap = {
    [TWO_FA_STATUS.DISABLED]: 'üîì',
    [TWO_FA_STATUS.ENABLED]: 'üîí',
    [TWO_FA_STATUS.PENDING]: '‚è≥',
    [TWO_FA_STATUS.REQUIRED]: 'üö®',
  };

  return iconMap[status];
};

export const getPasswordStrengthIcon = (strength: PasswordStrength): string => {
  const iconMap = {
    [PASSWORD_STRENGTH.WEAK]: 'üî¥',
    [PASSWORD_STRENGTH.FAIR]: 'üü†',
    [PASSWORD_STRENGTH.GOOD]: 'üü°',
    [PASSWORD_STRENGTH.STRONG]: 'üü¢',
  };

  return iconMap[strength];
};

export const getPasswordStrengthScore = (strength: PasswordStrength): number => {
  const scoreMap = {
    [PASSWORD_STRENGTH.WEAK]: 25,
    [PASSWORD_STRENGTH.FAIR]: 50,
    [PASSWORD_STRENGTH.GOOD]: 75,
    [PASSWORD_STRENGTH.STRONG]: 100,
  };

  return scoreMap[strength];
};

// ÎπÑÎ∞ÄÎ≤àÌò∏ Í∞ïÎèÑ Í≥ÑÏÇ∞
export const calculatePasswordStrength = (password: string): PasswordStrength => {
  let score = 0;

  // Í∏∏Ïù¥ Ï≤¥ÌÅ¨
  if (password.length >= 8) score += 1;
  if (password.length >= 12) score += 1;

  // Î¨∏Ïûê Ï¢ÖÎ•ò Ï≤¥ÌÅ¨
  if (/[a-z]/.test(password)) score += 1; // ÏÜåÎ¨∏Ïûê
  if (/[A-Z]/.test(password)) score += 1; // ÎåÄÎ¨∏Ïûê
  if (/[0-9]/.test(password)) score += 1; // Ïà´Ïûê
  if (/[^A-Za-z0-9]/.test(password)) score += 1; // ÌäπÏàòÎ¨∏Ïûê

  // Ïó∞ÏÜç Î¨∏Ïûê Ï≤¥ÌÅ¨ (Í∞êÏ†ê)
  if (/(.)\1{2,}/.test(password)) score -= 1; // Í∞ôÏùÄ Î¨∏Ïûê 3Í∞ú Ïù¥ÏÉÅ
  if (/123|abc|qwe/i.test(password)) score -= 1; // Ïó∞ÏÜçÎêú Î¨∏Ïûê

  if (score <= 2) return PASSWORD_STRENGTH.WEAK;
  if (score <= 3) return PASSWORD_STRENGTH.FAIR;
  if (score <= 4) return PASSWORD_STRENGTH.GOOD;
  return PASSWORD_STRENGTH.STRONG;
};

// ÌÜ†ÌÅ∞ ÎßåÎ£å ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
export const isTokenExpired = (token: string): boolean => {
  try {
    const payload = JSON.parse(atob(token.split('.')[1] ?? ''));
    const currentTime = Date.now() / 1000;
    return payload.exp < currentTime;
  } catch {
    return true; // ÌÜ†ÌÅ∞ ÌååÏã± Ïã§Ìå® Ïãú ÎßåÎ£åÎêú Í≤ÉÏúºÎ°ú Ï≤òÎ¶¨
  }
};

// ÌÜ†ÌÅ∞ ÎßåÎ£åÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ (Ï¥à)
export const getTokenTimeToExpiry = (token: string): number => {
  try {
    const payload = JSON.parse(atob(token.split('.')[1] ?? ''));
    const currentTime = Date.now() / 1000;
    return Math.max(0, payload.exp - currentTime);
  } catch {
    return 0;
  }
};

// Î°úÍ∑∏Ïù∏ Î∞©Î≤ïÎ≥Ñ ÏöîÍµ¨ÏÇ¨Ìï≠
export const getLoginMethodRequirements = (method: LoginMethod): {
  twoFARequired: boolean;
  emailVerificationRequired: boolean;
  strongPasswordRequired: boolean;
} => {
  const requirementsMap = {
    [LOGIN_METHOD.EMAIL]: {
      twoFARequired: false,
      emailVerificationRequired: true,
      strongPasswordRequired: true,
    },
    [LOGIN_METHOD.GOOGLE]: {
      twoFARequired: false,
      emailVerificationRequired: false,
      strongPasswordRequired: false,
    },
    [LOGIN_METHOD.GITHUB]: {
      twoFARequired: false,
      emailVerificationRequired: false,
      strongPasswordRequired: false,
    },
    [LOGIN_METHOD.SSO]: {
      twoFARequired: true,
      emailVerificationRequired: false,
      strongPasswordRequired: false,
    },
  };

  return requirementsMap[method];
};

// ÏÑ∏ÏÖò ÎßåÎ£å ÏûÑÍ≥ÑÍ∞í (Ï¥à)
export const SESSION_EXPIRY_WARNING_THRESHOLD = 5 * 60; // 5Î∂Ñ
export const SESSION_REFRESH_THRESHOLD = 15 * 60; // 15Î∂Ñ

// ÎπÑÎ∞ÄÎ≤àÌò∏ Ï†ïÏ±Ö
export const PASSWORD_POLICY = {
  MIN_LENGTH: 8,
  MAX_LENGTH: 128,
  REQUIRE_UPPERCASE: true,
  REQUIRE_LOWERCASE: true,
  REQUIRE_NUMBERS: true,
  REQUIRE_SPECIAL_CHARS: true,
  MAX_CONSECUTIVE_CHARS: 2,
  HISTORY_CHECK_COUNT: 5, // Ïù¥Ï†Ñ 5Í∞ú ÎπÑÎ∞ÄÎ≤àÌò∏ÏôÄ Ï§ëÎ≥µ Ï≤¥ÌÅ¨
} as const;

// Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Ï†úÌïú
export const LOGIN_ATTEMPT_POLICY = {
  MAX_ATTEMPTS: 5,
  LOCKOUT_DURATION: 15 * 60 * 1000, // 15Î∂Ñ (Î∞ÄÎ¶¨Ï¥à)
  RESET_WINDOW: 60 * 60 * 1000, // 1ÏãúÍ∞Ñ (Î∞ÄÎ¶¨Ï¥à)
} as const;
